#include <iostream>
using namespace std;

#include "my_widget.h"

#include <qfiledialog.h>
#include <qpainter.h>
#include <qmessagebox.h>
#include <QMenuBar>
#include <QPixmap>
#include <QMouseEvent>
#include <QLabel>
#include <QToolBar>
#include <QStack>
#include <QRadioButton>
#include <QButtonGroup>
#include <QVBoxLayout>
#include <QBoxLayout>
#include <QDialog>
#include "line.h"
#include <QColorDialog>


MyMainWindow::MyMainWindow(QWidget* parent, const char* name)
:QMainWindow(parent)
{

    createMenus();
    initBasics();
    initDialogs();
}


void MyMainWindow::initLineSettingDialog(QDialog *dialog){
    QVBoxLayout *mainLayout = new QVBoxLayout(dialog);

    QHBoxLayout *topLayout = new QHBoxLayout(dialog);
    QVBoxLayout *bottomLayout = new QVBoxLayout(dialog);
    mainLayout->addLayout(topLayout);
    mainLayout->addLayout(bottomLayout);

    //in the top layout
    QVBoxLayout *lineStyleLayout = new QVBoxLayout(dialog);
    QVBoxLayout *capStyleLaout = new QVBoxLayout(dialog);
    topLayout->addLayout(lineStyleLayout);
    topLayout->addLayout(capStyleLaout);

    createLineStylesInVerticalLayout(lineStyleLayout, dialog);
    createCapStyleVerticalLayout(capStyleLaout, dialog);
    createLineThicknessInLayout(bottomLayout, dialog);

}

void MyMainWindow::initDialogs(){
    lineSettingDialog = new QDialog(this);
    initLineSettingDialog(lineSettingDialog);

    penSettingDialog = new QDialog(this);
    initPenSettingDialog(penSettingDialog);

    rectangleDialog = new QDialog(this);
    initRectangleDialog(rectangleDialog);

    eraserDialog = new QDialog(this);
    initEraserDialog(eraserDialog);

}


void MyMainWindow::initEraserDialog(QDialog *dialog){
    /** Layout doesn't have much children.. should be simpler */
    QVBoxLayout* parent = new QVBoxLayout(dialog);

    /** Children implementation */
    QLabel* heading = new QLabel(dialog);
    heading->setText("Eraser Thickness");

    QSlider* eraserThicknessSlider = new QSlider(Qt::Horizontal, dialog);
    eraserThicknessSlider->setMaximum(35);

    /** add them up */
    parent->addWidget(heading);
    parent->addWidget(eraserThicknessSlider);


    /** create slot/signal for slider */
    connect(eraserThicknessSlider, SIGNAL(valueChanged(int)), this, SLOT(OnEraserSizeChanged(int)));


}

void MyMainWindow::OnEraserSizeChanged(int val){
    eraserSize = val;
}


void MyMainWindow::initRectangleDialog(QDialog* dialog){
    /** Create Layouts first */
    QVBoxLayout *mainLayout = new QVBoxLayout(dialog);
    QHBoxLayout *topLayout = new QHBoxLayout(dialog);
    QVBoxLayout *bottomLayout = new QVBoxLayout(dialog);


    /** Arrange them */
    mainLayout->addLayout(topLayout);
    mainLayout->addLayout(bottomLayout);

    /** Populate them */
    populateRectangleTopLayout(topLayout, dialog);
    populateRectangleBottomLayout(bottomLayout, dialog);

}

void MyMainWindow::populateRectangleTopLayout(QBoxLayout* parentLayout, QDialog* dialog){
    /** horizontal two layouts as I can see there */
    QVBoxLayout *boundaryStyleLayout = new QVBoxLayout(dialog);
    QVBoxLayout *rightTopLayout = new QVBoxLayout(dialog);

    /** add them to parent layout */
    parentLayout->addLayout(boundaryStyleLayout);
    parentLayout->addLayout(rightTopLayout);

    /** populate */
    populateRectBoundaryStyleLayout(boundaryStyleLayout, dialog);
    populateRectRightTopLayout(rightTopLayout, dialog);

}


void MyMainWindow::populateRectBoundaryStyleLayout(QBoxLayout* parent, QDialog* dialog){

    QButtonGroup *buttonGroup = new QButtonGroup(dialog);

    QRadioButton *solid = new QRadioButton("solid", dialog);
    QRadioButton *dashed = new QRadioButton("dashed", dialog);
    QRadioButton *dotted = new QRadioButton("dotted", dialog);
    QRadioButton *dashedDotted = new QRadioButton("dashed-dotted", dialog);
    QRadioButton *dashedDotDotted = new QRadioButton("dashed-dot-dotted", dialog);

    addButton(parent, buttonGroup, solid);
    addButton(parent, buttonGroup, dashed);
    addButton(parent, buttonGroup, dotted);
    addButton(parent, buttonGroup, dashedDotted);
    addButton(parent, buttonGroup, dashedDotDotted);


}

void MyMainWindow::populateRectRightTopLayout(QBoxLayout* parent, QDialog* dialog){

    /** Three layouts there */
    QVBoxLayout *shapeTypeLayout = new QVBoxLayout(dialog);
    QVBoxLayout *fillColorLayout = new QVBoxLayout(dialog);
    QVBoxLayout *boundaryLayout = new QVBoxLayout(dialog);

    /** add them to parent */
    parent->addLayout(shapeTypeLayout);
    parent->addLayout(fillColorLayout);
    parent->addLayout(boundaryLayout);


    QButtonGroup *shapeTypeButtonGroup = new QButtonGroup(dialog);
    QButtonGroup *fillColorButtonGroup = new QButtonGroup(dialog);
    QButtonGroup *boundaryButtonGroup = new QButtonGroup(dialog);


    /** define shapes */
    QRadioButton *rectangle = new QRadioButton("Rectangle" , dialog);
    QRadioButton *roundedRectangle = new QRadioButton("Rounded Rectangle" , dialog);
    QRadioButton *elipse = new QRadioButton("Elispe" , dialog);

    addButton(shapeTypeLayout, shapeTypeButtonGroup, rectangle);
    addButton(shapeTypeLayout, shapeTypeButtonGroup, roundedRectangle);
    addButton(shapeTypeLayout, shapeTypeButtonGroup, elipse);

    /** define fill color */
    QRadioButton *foreground = new QRadioButton("ForeGround" , dialog);
    QRadioButton *background = new QRadioButton("Background" , dialog);
    QRadioButton *nofill = new QRadioButton("No Fill" , dialog);

    addButton(fillColorLayout, fillColorButtonGroup, foreground);
    addButton(fillColorLayout, fillColorButtonGroup, background);
    addButton(fillColorLayout, fillColorButtonGroup, nofill);


    /** define boundary type */
    QRadioButton *miter = new QRadioButton("Miter join" , dialog);
    QRadioButton *bevel = new QRadioButton("Bevel join" , dialog);
    QRadioButton *round = new QRadioButton("Round join" , dialog);

    addButton(boundaryLayout, boundaryButtonGroup, miter);
    addButton(boundaryLayout, boundaryButtonGroup, bevel);
    addButton(boundaryLayout, boundaryButtonGroup, round);

}



void MyMainWindow::populateRectangleBottomLayout(QVBoxLayout* parent, QDialog* dialog){

    QLabel *lineThicknessLabel = new QLabel("Line Thickness", dialog);
    QSlider *lineThicknessSlider = new QSlider(Qt::Horizontal, dialog);
    lineThicknessSlider->setMaximum(35);

    parent->addWidget(lineThicknessLabel);
    parent->addWidget(lineThicknessSlider);


    QLabel *rectangleCurve = new QLabel("Rectangle Curve", dialog);
    QSlider *rectangleCurveSlider = new QSlider(Qt::Horizontal, dialog);
    rectangleCurveSlider->setMaximum(35);

    parent->addWidget(rectangleCurve);
    parent->addWidget(rectangleCurveSlider);





    /** connect to slot */
    connect(lineThicknessSlider, SIGNAL(valueChanged(int)), this, SLOT(OnRectangeLineSizeChanged(int)));
    connect(rectangleCurveSlider, SIGNAL(valueChanged(int)), this, SLOT(OnRectangleCurveSliderChanged(int)));


}


void MyMainWindow::OnRectangeLineSizeChanged(int val){
    rectangleLineSize = val;
}

void MyMainWindow::OnRectangleCurveSliderChanged(int val){
    rectangleCurveSize = val;
}


void MyMainWindow::initPenSettingDialog(QDialog* dialog){
    /** Create the layout first */
    QVBoxLayout *mainLayout = new QVBoxLayout(dialog);
    QHBoxLayout *capStyleLayout = new QHBoxLayout(dialog);
    QVBoxLayout *penSizeLayout = new QVBoxLayout(dialog);

    /** Assemble layouts */
    mainLayout->addLayout(capStyleLayout);
    mainLayout->addLayout(penSizeLayout);

    /** Populate */
    populateCapStyleLayout(capStyleLayout, dialog);
    populatePenSizeLayout(penSizeLayout, dialog);
}

void MyMainWindow::populatePenSizeLayout(QBoxLayout *parent, QDialog* dialog){

    QSlider *penSlider = new QSlider(Qt::Horizontal, dialog);
    penSlider->setMaximum(35);

    parent->addWidget(penSlider);

    /** connect to slot */
    connect(penSlider, SIGNAL(valueChanged(int)), this, SLOT(OnPenSizeChanged(int)));

}

void MyMainWindow::OnPenSizeChanged(int val){
    /** val changed, so change the pen size too*/

    penSize = val;

}

void MyMainWindow::populateCapStyleLayout(QBoxLayout *parent, QDialog* dialog){

    QButtonGroup *capStyleGroup = new QButtonGroup(dialog);

    QRadioButton *flatCapStyle = new QRadioButton("Flat", dialog);
    QRadioButton *squaredCapStyle = new QRadioButton("Square", dialog);
    QRadioButton *roundStyle = new QRadioButton("Round", dialog);

    addButton(parent, capStyleGroup, flatCapStyle);
    addButton(parent, capStyleGroup, squaredCapStyle);
    addButton(parent, capStyleGroup, roundStyle);

}



void MyMainWindow::createMenus(){

    QMenu* file = new QMenu("File", this);
    file->addAction("New image...", this, SLOT(OnNewImage()));
    file->addAction("Load image...", this, SLOT(OnLoadImage()));
    file->addAction("Save image...", this, SLOT(OnSaveImage()));
    menuBar()->addMenu(file);

    /**Representation of Edits */
    QMenu* settings = new QMenu("Settings", this);
    settings->addAction("Line Settings", this, SLOT(OnLineSettingsClicked()));
    settings->addAction("Pen Settings", this, SLOT(OnPenSettingsClicked()));
    settings->addAction("Eraser Settings", this, SLOT(OnEraserSettingsClicked()));
    settings->addAction("Rectangle Settings", this, SLOT(OnRectangleSettingsClicked()));



    //right now just implement the polygon or line
   QMenu* edit = new QMenu("Edit", this);
   QToolBar* optionsToolbar = addToolBar("Pen");

   QIcon newFileIcon("/Users/rockink/410hw3/icon/new_icon.bmp");
   QIcon backgroundColorIcon("/Users/rockink/410hw3/icon/bcolor_icon.bmp");
   QIcon clearAllIcon("/Users/rockink/410hw3/icon/clearall_icon.bmp");
   QIcon eraserIcon("/Users/rockink/410hw3/icon/eraser_icon.bmp");
   QIcon fcolorIcon("/Users/rockink/410hw3/icon/fcolor_icon.bmp");
   QIcon lineIcon("/Users/rockink/410hw3/icon/line_icon.bmp");
   QIcon openIcon("/Users/rockink/410hw3/icon/open_icon.bmp");
   QIcon redoIcon("/Users/rockink/410hw3/icon/redo_icon.bmp");
   QIcon undoIcon("/Users/rockink/410hw3/icon/undo_icon.bmp");
   QIcon penIcon("/Users/rockink/410hw3/icon/pen_icon.bmp");

   optionsToolbar->addAction(newFileIcon, "New File", this, SLOT(OnNewImage()));
   optionsToolbar->addAction(openIcon, "Open File", this, SLOT(OnLoadImage()));
   optionsToolbar->addAction(penIcon, "Select Pen", this, SLOT(OnPolygonOptionClicked(bool)));
   optionsToolbar->addAction(lineIcon,"Select Line", this, SLOT(OnLineOptionClicked(bool)));
   optionsToolbar->addAction(eraserIcon, "Select Eraser", this, SLOT(OnEraserOptionClicked(bool)));
   optionsToolbar->addAction(clearAllIcon, "Clear Board", this, SLOT(OnClearBoardOptionClicked(bool)));
   optionsToolbar->addAction(undoIcon, "Undo", this, SLOT(OnUndoOptionClicked(bool)));
   optionsToolbar->addAction(redoIcon, "Redo", this, SLOT(OnRedoOptionClicked(bool)));
   optionsToolbar->addAction(fcolorIcon, "Select Foreground Color", this, SLOT(OnForegroundColorSelectOptionClicked(bool)));
   optionsToolbar->addAction(backgroundColorIcon,"Select Background Color", this, SLOT(OnBackgroundColorSelectOptionClicked(bool)));


   edit->addAction("Select Pen", this, SLOT(OnPolygonOptionClicked(bool)));
   edit->addAction("Select Line", this, SLOT(OnLineOptionClicked(bool)));
   edit->addAction("Select Eraser", this, SLOT(OnEraserOptionClicked(bool)));
   edit->addAction("Clear Board", this, SLOT(OnClearBoardOptionClicked(bool)));
   edit->addAction("Undo", this, SLOT(OnUndoOptionClicked(bool)));
   edit->addAction("Redo", this, SLOT(OnRedoOptionClicked(bool)));


   menuBar()->addMenu(file);
   menuBar()->addMenu(settings);
   menuBar()->addMenu(edit);


}


/**
 * @brief MyMainWindow::OnLineSettingsClicked
 * Responsible to show modals based on the setting!! Lets see how it works!!
 */
void MyMainWindow::OnLineSettingsClicked(){

    lineSettingDialog->exec();

}


void MyMainWindow::OnForegroundColorSelectOptionClicked(bool checked){
    QColor color = QColorDialog::getColor(Qt::white, this, "Select Color");
    foregroundColor = new QColor(color);
}


void MyMainWindow::OnBackgroundColorSelectOptionClicked(bool checked){
    QColor color = QColorDialog::getColor(Qt::white, this, "Select Color");
    backgroundColor = new QColor(color);
}



void MyMainWindow::createLineThicknessInLayout(QBoxLayout* parentLayout, QDialog* dialog){
    QLabel *title = new QLabel("Line Thickness", dialog);
    QSlider *ticknessSlider = new QSlider(Qt::Horizontal, dialog);

    ticknessSlider->setMaximum(35);

    parentLayout->addWidget(title);
    parentLayout->addWidget(ticknessSlider);

    connect(ticknessSlider, SIGNAL(valueChanged(int)), this, SLOT(OnLineThickness(int)));
}

void MyMainWindow::OnLineThickness(int thickness){
    lineThickness = thickness;
}

void MyMainWindow::createCapStyleVerticalLayout(QBoxLayout* mainVerticalLayout, QDialog* dialog){

    QVBoxLayout *capStyleVerticalLayout  = new QVBoxLayout(dialog);
    QButtonGroup *capStyleGroup = new QButtonGroup(dialog);

    QRadioButton *flatCapStyle = new QRadioButton("Flat", dialog);
    QRadioButton *squaredCapStyle = new QRadioButton("Square", dialog);
    QRadioButton *roundStyle = new QRadioButton("Round", dialog);

    addButton(capStyleVerticalLayout, capStyleGroup, flatCapStyle);
    addButton(capStyleVerticalLayout, capStyleGroup, squaredCapStyle);
    addButton(capStyleVerticalLayout, capStyleGroup, roundStyle);


    mainVerticalLayout->addLayout(capStyleVerticalLayout);


    //now for draw type
    QVBoxLayout *drawTypeVerticalLayout = new QVBoxLayout(dialog);

    QButtonGroup *drawTypeGroup = new QButtonGroup(dialog);

    QRadioButton *singleDrawType = new QRadioButton("Single", dialog);
    QRadioButton *polyDrawType = new QRadioButton("Poly", dialog);

    drawTypeVerticalLayout->addWidget(new QLabel("Draw Type" , dialog));

    addButton(drawTypeVerticalLayout, drawTypeGroup, singleDrawType);
    addButton(drawTypeVerticalLayout, drawTypeGroup, polyDrawType);

    mainVerticalLayout->addLayout(drawTypeVerticalLayout);

    connect(capStyleGroup, SIGNAL(buttonClicked(int)), this, SLOT(OnCapStyleSelected(int)));
    connect(drawTypeGroup, SIGNAL(buttonClicked(int)), this, SLOT(OnLineDrawTypeSelected(int)));


}

void MyMainWindow::OnLineDrawTypeSelected(int index){
    switch (index) {
    case 1:
        lineDrawType = SINGLE;
        break;
    case 2:
        lineDrawType = POLY;
        break;

    default:
        break;
    }
}


void MyMainWindow::OnCapStyleSelected(int index){
    switch (index) {
    case 1:
        lineCapStype = Qt::PenCapStyle::FlatCap;
        break;
    case 2:
        lineCapStype = Qt::PenCapStyle::SquareCap;
        break;
    case 3:
        lineCapStype = Qt::PenCapStyle::RoundCap;
        break;
    default:
        break;
    }
}

void MyMainWindow::addButton(QLayout* vLayout, QButtonGroup* buttonGroup, QRadioButton* button){
    buttonGroup->addButton(button);
    vLayout->addWidget(button);
}


void MyMainWindow::createLineStylesInVerticalLayout(QBoxLayout* verticalLayout, QDialog *dialog){

    QLabel *heading = new QLabel(dialog);
    heading->setText("Line Style");

    QButtonGroup *buttonGroup = new QButtonGroup(dialog);

    QRadioButton *solid = new QRadioButton("solid", dialog);
    QRadioButton *dashed = new QRadioButton("dashed", dialog);
    QRadioButton *dotted = new QRadioButton("dotted", dialog);
    QRadioButton *dashedDotted = new QRadioButton("dashed-dotted", dialog);
    QRadioButton *dashedDotDotted = new QRadioButton("dashed-dot-dotted", dialog);

    buttonGroup->addButton(solid, 1);
    buttonGroup->addButton(dashed, 2);
    buttonGroup->addButton(dotted, 3);
    buttonGroup->addButton(dashedDotted, 4);
    buttonGroup->addButton(dashedDotDotted, 5);


    verticalLayout->addWidget(heading);
    verticalLayout->addWidget(solid);
    verticalLayout->addWidget(dashed);
    verticalLayout->addWidget(dotted);
    verticalLayout->addWidget(dashedDotted);
    verticalLayout->addWidget(dashedDotDotted);

    connect(buttonGroup, SIGNAL(buttonClicked(int)), this, SLOT(OnLineStyleSelectedSlot(int)));

}


void MyMainWindow::OnLineStyleSelectedSlot(int index){
    switch (index) {
    case 1:
        lineStyle = Qt::PenStyle::SolidLine;
        break;
    case 2:
        lineStyle = Qt::PenStyle::DashLine;
        break;
    case 3:
        lineStyle = Qt::PenStyle::DashDotLine;
        break;
    case 4:
        lineStyle = Qt::PenStyle::DashDotDotLine;
        break;
    default:
        break;
    }
}

void MyMainWindow::OnRectangleSettingsClicked(){

    rectangleDialog->exec();

}


/**
 * @brief MyMainWindow::OnPenSettingsClicked
 * Pen settings
 */
void MyMainWindow::OnPenSettingsClicked(){
    penSettingDialog->exec();
}


/**
  *
  *
  */
void MyMainWindow::OnEraserSettingsClicked(){

    eraserDialog->exec();

}




/*
 * UndoOption click unvolves
 * 1. getting last undo elem
 * 2. get last element from corresponding vector, eg. line, point, erased vector
 * 3. save it in the redoStack, corresponding with the UndoRedoStack
 *
 * */
void MyMainWindow::OnUndoOptionClicked(bool clicked){

    DrawType undoDataType = undoRedoStack.doUndo();

    switch (undoDataType) {
        case NULL_DRAW:
            break;
        case DRAW_LINE:{
            Line line = savedLineVectors->last();
            undidLineVectors.push(line);
            savedLineVectors->removeLast();
            break;
        }
        case DRAW_POINT:{
            Point point = savedPolygon.last();
            undidPoints.push(point);
            savedPolygon.removeLast();
            break;
        }
        case ERASER:{
            Point point = savedErasedPoints.last();
            undidErasedPoints.push(point);
            savedErasedPoints.removeLast();
            break;
        }
        default:{
            std::cout<<"There should be no default called. Should be either of these above!" <<endl;
            break;
        }


    }

    update();

}

/**
 * @brief MyMainWindow::OnRedoOptionClicked
 * @param clicked
 *
 * Redo means, get the redo command, and operate on that
 *
 */
void MyMainWindow::OnRedoOptionClicked(bool clicked){

    DrawType redoDataType = undoRedoStack.doRedo();

    std::cout<< "onredoption" <<std::endl;

    switch (redoDataType) {
        case NULL_DRAW:
            break;
        case DRAW_LINE:{
            Line line = undidLineVectors.last();
            savedLineVectors->append(line);
            undidLineVectors.removeLast();
            break;
        }
        case DRAW_POINT:{
            Point point = undidPoints.last();
            savedPolygon.append(point);
            undidPoints.removeLast();
            break;
        }
        case ERASER:{
            Point point = undidErasedPoints.last();
            savedErasedPoints.append(point);
            undidErasedPoints.removeLast();
            break;
        }
        default:{
            std::cout<<"There should be no default called. Should be either of these above!" <<endl;
            break;
        }


    }
    update();

}


void MyMainWindow::OnClearBoardOptionClicked(bool clicked){

    savedErasedPoints.clear();
    savedLineVectors->clear();
    savedPolygon.clear();
    undoRedoStack.clear();

    update();
}


void MyMainWindow::OnEraserOptionClicked(bool clicked){
    drawType = DrawType::ERASER;
}


/**
 * @brief MyMainWindow::OnLineOptionClicked
 * When the line option is clicked
 * @param clicked
 */
void MyMainWindow::OnLineOptionClicked(bool clicked){
    drawType = DrawType::DRAW_LINE;
    //this should be enough to trigger line selection
}

void MyMainWindow::OnPolygonOptionClicked(bool clicked = false){
    drawType = DrawType::DRAW_POINT;
    //this should be enough to select point based paint

}


void MyMainWindow::initBasics(){
    label = new QLabel();
    image = new QPixmap();


    size = QSize(600,600);
    label->setPixmap((*image));
    setFixedSize(size);
    pen = new QPen(Qt::black);
    pen->setWidth(3);

    /** background */
    backgroundColor = new QColor(Qt::white);
    foregroundColor = new QColor(Qt::black);



    /** Set Line params */
    lineCapStype = Qt::PenCapStyle::RoundCap;
    lineStyle = Qt::PenStyle::SolidLine;
    lineDrawType = SINGLE;
    lineThickness = 5;

    /** Line Stuff */
    savedLineVectors = new QVector<Line>();
    tempLine = new QLineF();


    /** Pen Params */
    penSize = 5;
    penCapStyle = Qt::RoundCap;
    tempPolygon = new QPolygon();


    /** Eraser Properties */
    eraserSize = 5;
    eraserPen = new QPen(Qt::white);
    pen->setWidth(penSize);
    tempErasedPoints = new QPolygon();



    command = MyCommand::NEW_PAINT;
    drawType = DrawType::DRAW_POINT;

    blankImage();

}


MyMainWindow::~MyMainWindow()
{
	delete image;
}

void MyMainWindow::paintEvent(QPaintEvent* e)
{
    QPainter painter;
    painter.begin(this);


    painter.drawPixmap(0, 0, (*image));

    switch (this->command) {
    case NEW_PAINT:
        blankImage();
        break;
    case MOUSE_MOVE_EVENT:
        drawMouseMovePaint(painter);
        break;
    case LOAD_NEW_IMAGE:
        painter.drawPixmap(0, 0, (*image));

    default:
        painter.drawPixmap(0, 0, (*image));
        break;
    }


    painter.end();
}

void MyMainWindow::drawMouseMovePaint(QPainter& paint){
    std::cout << "draw mouse move apint " << std::endl;



    switch (drawType) {


        case DRAW_LINE:{
            tempLine->setP1(startingPosition);
            tempLine->setP2(currentPosition);
//            tempLineVectors->append(QLineF(startingPosition, currentPosition));
            break;
        }
        case DRAW_POINT:{
            *(tempPolygon) << currentPosition;
            break;
        }
        case ERASER:{
            *(tempErasedPoints) << currentPosition;
            break;
        }
        default:{
            std::cout<<"There should be no default called. Should be either of these above!" <<endl;
            break;
        }

    }

    paint.drawPixmap(rect().width(), rect().height(), (*image));
    drawLine(paint);
    drawPoint(paint);
    erasePoint(paint);
    paint.save();



}


void MyMainWindow::resetTemporaries(){

    currentPosition.setX(0);
    currentPosition.setY(0);
    startingPosition.setX(0);
    startingPosition.setY(0);


    tempLine = new QLineF();
    tempErasedPoints = new QPolygon();
    tempPolygon= new QPolygon();
}


/**
 * @brief MyMainWindow::erasePoint
 * erase point is actually not deleting, but drawing with background color
 */
void MyMainWindow::erasePoint(QPainter& paint, bool temp){

    paint.setPen((*eraserPen));


    for(int i = 0; i < savedErasedPoints.size(); i++){
        Point point = savedErasedPoints.at(i);
        QPen currentPen;
        currentPen.setWidth(point.penSize);
        currentPen.setCapStyle(point.capStyle);
        currentPen.setColor((*point.getColor()));

        paint.setPen(currentPen);
        paint.drawPoints((*point.getPoints()));

    }

    if(temp){

//        QSet::Iterator it = tempErasedPoints->begin();

//        for(QSet::Iterator it = tempErasedPoints->begin(); it < tempErasedPoints->end(); it++){
            paint.drawPoints((*tempErasedPoints));
//        }

    }

}


void MyMainWindow::drawLine(QPainter& paint, bool temp){
    paint.setPen((*pen));
    pen->setWidth(lineThickness);

    for(int i = 0; i < savedLineVectors->size(); i++){
        Line line = savedLineVectors->at(i);
        QPen savedPen;
        savedPen.setWidth(line.lineThickness);
        savedPen.setStyle(line.lineStyle);
        savedPen.setCapStyle(line.lineCapStype);
        savedPen.setColor(*line.getColor());

        paint.setPen(savedPen);
        paint.drawLine((*line.getLineVectors()));
    }

    if(temp && !rightClicked){

        pen->setColor(*foregroundColor);
        pen->setStyle(lineStyle);
        pen->setCapStyle(lineCapStype);
        paint.drawLine((*tempLine));

    }



}

void MyMainWindow::drawPoint(QPainter& paint, bool temp){
    paint.setPen((*pen));

    for(int i = 0; i < savedPolygon.size(); i++){
        Point point = savedPolygon.at(i);
        QPen savedPen;
        savedPen.setWidth(point.penSize);
        savedPen.setCapStyle(point.capStyle);
        savedPen.setColor(*point.getColor());

        paint.setPen(savedPen);
        paint.drawPoints((*(point.getPoints())));

    }

    if(temp){
        QPen currentPen;
        currentPen.setWidth(penSize);
        currentPen.setCapStyle(penCapStyle);
        currentPen.setColor(*foregroundColor);
        paint.setPen(currentPen);

        paint.drawPoints((*tempPolygon));
    }





}



void MyMainWindow::OnNewImage()
{
    QString path = QFileDialog::getSaveFileName(this, tr("Open File"),
                                                    "/Users/rockink",
                                                    tr("Images (*.bmp)"));


    createNewImage(path);
}



/**
 * @brief MyMainWindow::createNewImage
 * Creates a new Image, based on the path location param s
 * @param path is the path here
 */
void MyMainWindow::createNewImage(QString& path){
    if (! path.isNull())
    {
        resetEverything();
        image->load(path);

    }

    else{

        command = MyCommand::NEW_PAINT;

    }

     this->repaint();

}




void MyMainWindow::resetEverything(){

    delete image;
    image = new QPixmap();
    command = MyCommand::LOAD_NEW_IMAGE;

    undoRedoStack.clear();
    resetSavedStates();
    resetTemporaries();

}

/**
 * @brief MyMainWindow::resetSavedStates
 * This actually resets the whole saved state that we stored for storing the points that we might
 * have needed for further situation
 */
void MyMainWindow::resetSavedStates(){
    savedErasedPoints.clear();
    savedLineVectors->clear();
    savedPolygon.clear();
}




//blank image creates a new white background image
void MyMainWindow::blankImage(){


    QPainter paint(this);
    paint.fillRect(rect(), Qt::white);



}



void MyMainWindow::OnSaveImage(){
    QString filePath = QFileDialog::getSaveFileName(this, tr("Save File"),
                                                    "/home",

                                                    tr("Images (*.bmp)"));


    QPainter paint(this);
    paint.save();
    paint.end();

    if(image->save(filePath))
        std::cout << filePath.toStdString() << "  saved "  << endl;
    else {

        std::cout << filePath.toStdString() << "  not saved "  << endl;
    }

}


void MyMainWindow::OnLoadImage()
{
    QString s = QFileDialog::getOpenFileName(this, tr("Open File"),
                                                    "Users/rockink",
                                                    tr("Images (*.png)"));
	if (! s.isNull())
	{
		image->load(s);
	}

    command = IMAGE_LOADED;

    update();
}

void MyMainWindow::mousePressEvent(QMouseEvent * e)
{

   if(e->button() == Qt::RightButton){

       e->accept();

       std::cout << "right button clicked " << std::endl;

       rightClicked = true;
       switch (command) {
       case DRAW_LINE:
           OnLineSettingsClicked();
           break;
       case DRAW_POINT:
           OnPenSettingsClicked();
           break;
       case ERASER:
           OnEraserSettingsClicked();
       default:

           break;
       }

       mouseReleaseEvent(e);


       return;
   }

   //QMessageBox::about( this, "bitmap", "Mouse click event!");
   startingPosition = e->pos();
   currentPosition = e->pos();
   previousPosition = e->pos();



}


void MyMainWindow::mouseMoveEvent(QMouseEvent *event){
    

    
    previousPosition = currentPosition;
    currentPosition = event->pos();

    std::cout << "move event " << std::endl;

    command = MyCommand::MOUSE_MOVE_EVENT;
    this->update();

}


/*
 * When button is released, it is in this time that we actually save it in the real data structure
 *
 * */
void MyMainWindow::mouseReleaseEvent(QMouseEvent *e){

    std::cout<< "button released " << std::endl;

    if(e->button() == Qt::RightButton){
        rightClicked = false;
        return;
    }


    undoRedoStack.addToUndo(drawType);
    switch (drawType) {
        case DRAW_LINE:{
            savedLineVectors->append(Line(foregroundColor, lineStyle, lineCapStype, lineThickness, tempLine));
            break;
        }
        case DRAW_POINT:{
            savedPolygon.append(Point(foregroundColor, penCapStyle, penSize, tempPolygon));
            break;
        }
        case ERASER:{
            (*tempErasedPoints) << currentPosition;
            savedErasedPoints.append(Point(backgroundColor, eraserSize, tempErasedPoints));
            break;
        }
        default:{
            std::cout<<"There should be no default called. Should be either of these above!" <<endl;
            break;
        }

    }

    startingPosition = e->pos();
    currentPosition = e->pos();
    previousPosition = e->pos();


    resetTemporaries();
    update();

}

